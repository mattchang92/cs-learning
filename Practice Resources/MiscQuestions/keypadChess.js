/* Given a 2D array in the shape of a pinpad (1-9) and a chess piece placed randomly on a number.
  What are all the possible phone numbers generated by valid moves by the chess piece?
  Staying in place is not a valid move  */

class Key {
  constructor(val) {
    this.val = val;
  }
}

class Bishop {
  constructor() {
    this.moves = [
      [-2, -2],
      [-1, -1],
      // [0, 0],
      [2, 2],
      [1, 1],
      [-2, 2],
      [-1, 1],
      [2, -2],
      [1, -1],
    ]
  }
}

class Pawn {
  constructor() {
    this.moves = [
      [0, 0],
      [-1, 0],
    ]
  }
}


class Board {
  constructor() {
    this.board = this.buildBoard()
  }

  buildBoard() {
    const board = [];
    for (let col = 0; col < 3; col++) {
      for (let row = 0; row < 3; row++) {
        if (!board[col]) board[col] = [];
        board[col].push(new Key((col * 3) + row + 1));
      }
    }
    return board;
  }

  isValidMove(row, col) {
    return this.board[row] && this.board[row][col];
  }
}

// const currentNumber = [];
const board = new Board();
const memo = {};

const buildPhoneNumber = (piece, row, col, numbers = []) => {
  numbers.push(board.board[row, col].val);
  let moves;

  if (numbers.length === 10) {
    console.log(numbers.join(''));
    return;
  }

  const currentKey = `${row}${col}`;
  if (memo[currentKey]) {
    moves = memo[currentKey];
  } else {
    moves = piece.moves
      .map(move => [move[0] + row, move[1] + col])
      .filter(move => board.isValidMove(...move));
  
    memo[currentKey] = moves.length;
  }


  moves.forEach(move => {
    // const key = move.join('');
    // if (!memo[key]) {
    //   memo[key] = buildPhoneNumber(piece, move[0], move[1], memo);
    // }
    // numbers.push(memo[key]);
    // buildPhoneNumber(piece, move[0], move[1], memo);
  });
  console.log('what is memo', memo)
  numbers.pop();
};

buildPhoneNumber(new Pawn(), 1, 1);
// console.log(numbers)