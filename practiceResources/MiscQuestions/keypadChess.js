/* Given a 2D array in the shape of a pinpad (1-9) and a chess piece placed randomly on a number.
  What are all the possible phone numbers generated by valid moves by the chess piece?
  Staying in place is not a valid move  */


class Bishop {
  constructor() {
    this.moves = [
      [-2, -2],
      [-1, -1],
      [2, 2],
      [1, 1],
      [-2, 2],
      [-1, 1],
      [2, -2],
      [1, -1],
    ];
  }
}

const buildSolutionTemplate = (length) => {
  const solution = {};
  for (let i = 1; i < 10; i++) {
    for (let j = 1; j <= length; j++) {
      if (!solution[i]) solution[i] = {};
      solution[i][j] = new Set();
    }
  }
  return solution;
};


class Board {
  constructor() {
    this.board = this.buildBoard();
  }

  buildBoard() {
    const board = [];
    for (let col = 0; col < 3; col++) {
      for (let row = 0; row < 3; row++) {
        if (!board[col]) board[col] = [];
        board[col].push((col * 3) + row + 1);
      }
    }
    return board;
  }

  getIndex(num) {
    for (let row = 0; row < this.board.length; row++) {
      for (let col = 0; col < this.board[0].length; col++) {
        if (this.board[row][col] === num) return { row, col };
      }
    }
  }

  isValidMove(row, col) {
    return this.board[row] && this.board[row][col];
  }
}


const generateSolutions = (solutions, board, piece, start, length) => {
  if (length === 1) {
    Object.keys(solutions).forEach(num => solutions[num][length].add(num.toString()));
    return;
  }

  const { row, col } = board.getIndex(start);

  const moves = piece.moves
    .map(move => board.board[move[0] + row] && board.board[move[0] + row][move[1] + col])
    .filter(move => move);

  moves.forEach((move) => {
    if (solutions[move][length - 1].size === 0) generateSolutions(solutions, board, piece, move, length - 1);

    solutions[move][length - 1].forEach((solution) => {
      solutions[start][length].add(start.toString().concat(solution));
    });
  });
};


const buildPhoneNumber = (piece, start, length) => {
  const board = new Board();
  const solutions = buildSolutionTemplate(length);

  generateSolutions(solutions, board, piece, start, length);

  console.log(solutions);
};

buildPhoneNumber(new Bishop(), 5, 10);
